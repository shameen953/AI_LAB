#Home Assignment 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Create the dataset directly
data = {
    'Gender': ['Male', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female'],
    'Age': [25, 30, 45, 28, 35, 50, 32, 29, 48],
    'Physical Activity Level': [3, 2, 1, 3, 2, 1, 2, 3, 1],
    'Stress Level': [2, 3, 4, 1, 2, 4, 2, 3, 4],
    'Alcohol Consumption': ['Low', 'Moderate', 'High', 'Low', 'Moderate', 'High', 'Low', 'Moderate', 'High'],
    'Smoking Habit': ['No', 'No', 'Yes', 'No', 'No', 'Yes', 'No', 'No', 'Yes'],
    'Work Hours': [8, 9, 10, 7, 8, 10, 8, 8, 9],
    'Sleep Disorder': ['Yes', 'No', 'No', 'No', 'No', 'Yes', 'No', 'Yes', 'Yes']
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Display the dataset
print("Original Dataset:")
print(df)

# Step 2: Encode categorical variables
label_enc = LabelEncoder()
df['Gender'] = label_enc.fit_transform(df['Gender'])  # Male = 1, Female = 0
df['Alcohol Consumption'] = label_enc.fit_transform(df['Alcohol Consumption'])  # Low=1, Moderate=2, High=0
df['Smoking Habit'] = label_enc.fit_transform(df['Smoking Habit'])  # No=0, Yes=1
df['Sleep Disorder'] = label_enc.fit_transform(df['Sleep Disorder'])  # No=0, Yes=1

print("\nDataset after Label Encoding:")
print(df)

# Step 3: Define features (X) and target (y)
X = df.drop(columns=['Sleep Disorder'])  # Features
y = df['Sleep Disorder']  # Target

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 6: Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 7: Make predictions
y_pred = model.predict(X_test)

# Step 8: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy of the Random Forest Classifier:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
